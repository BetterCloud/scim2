#!/usr/bin/env groovy

// DO NOT CHANGE THIS FILE (alone)
// We should maintain this file in all our repos, so when changing this file,
// please copy-paste it to all other repos too (it also means all changes should be universal).
// Otherwise the changes may be overridden some time later.

def slackChannel = 'tpsvc-notifications'
def decodedJobName = env.JOB_NAME.replaceAll("%2F", "/")

def mainBranches = ['develop']

def nexusCredentials = usernamePassword(
        credentialsId: 'nexus-artifact-zl-credentials',
        passwordVariable: 'NEXUS_TALEND_PASSWORD',
        usernameVariable: 'NEXUS_TALEND_USER')

def veracodeCredentials = usernamePassword(
        credentialsId: 'veracode-api-credentials',
        passwordVariable: 'VERACODE_KEY',
        usernameVariable: 'VERACODE_ID')

def githubCredentials = usernamePassword(
        credentialsId: 'github-credentials',
        passwordVariable: 'GITHUB_PASSWORD',
        usernameVariable: 'GITHUB_USER')

def artifactoryCredentials = usernamePassword(
        credentialsId: 'artifactory-datapwn-credentials',
        passwordVariable: 'ARTIFACTORY_TALEND_PASSWORD',
        usernameVariable: 'ARTIFACTORY_TALEND_LOGIN')

String getGitRepositoryName() {
    String repoName = scm.getUserRemoteConfigs()[0].getUrl().tokenize('/').last().toString()
    repoName = repoName.endsWith('.git') ? repoName.substring(0, repoName.length() - 4) : repoName
    echo "Determined git repository name to be '$repoName'"
    return repoName
}

pipeline {

    agent {
        kubernetes {
            yamlFile 'builderPodTemplate.yaml'
            defaultContainer 'talend-tsbi-springboot-builder'
        }
    }

    environment {
        NEXUS_TPSVC_URL                       = 'https://artifacts-zl.talend.com/nexus/content/repositories/tpsvc'
        NEXUS_TALEND_SNAPSHOTS_URL            = 'https://artifacts-zl.talend.com/nexus/content/repositories/snapshots'
        NEXUS_TALEND_RELEASES_URL             = 'https://artifacts-zl.talend.com/nexus/content/repositories/releases'
        NEXUS_TALEND_OS_RELEASE_URL           = 'https://artifacts-zl.talend.com/nexus/content/repositories/TalendOpenSourceRelease'
        NEXUS_TALEND_OPEN_SOURCE_RELEASE_URL  = 'https://artifacts-zl.talend.com/nexus/content/repositories/TalendOpenSourceRelease'
        NEXUS_TALEND_OPEN_SOURCE_SNAPSHOT_URL = 'https://artifacts-zl.talend.com/nexus/content/repositories/TalendOpenSourceSnapshot'
        SRCCLR_DEBUG_0PT   = '0'
        SRCCLR_CI_JSON_OPT = '0'
        VERACODE_TOKEN_CREDENTIALS_ID = 'veracode-token'
        VERACODE_APP_NAME = 'Services Platform'
        VERACODE_SANDBOX = getGitRepositoryName()
    }

    options {
        buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME in mainBranches ? '5' : '2'))
        timeout(time: 30, unit: 'MINUTES')
        skipStagesAfterUnstable()
        disableConcurrentBuilds()
    }

    parameters {
        booleanParam(name: 'STATIC_SCAN',
                defaultValue: env.BRANCH_NAME in mainBranches,
                description: 'Should static scan (SAST) be performed?')
        booleanParam(name: 'SCA_SCAN',
                defaultValue: env.BRANCH_NAME in mainBranches,
                description: 'Should SourceClear scan (SCA) be performed?')
        choice(name: 'VERACODE_TOKEN_CREDENTIALS_ID',
                choices: ['veracode-token', 'veracode-sandbox-token'],
                description: 'Which credentials to use for the veracode token')
        choice(name: 'SRCCLR_CI_DEBUG_0PT',
                choices: ['0', '1'],
                description: 'Sets the DEBUG option on the srcclr cli command')
        choice(name: 'SRCCLR_CI_JSON_OPT',
                choices: ['0', '1'],
                description: 'Sets the SRCCLR_CI_JSON option on the srcclr cli command')
        booleanParam(name: 'UPDATE_TSBI',
                defaultValue: env.BRANCH_NAME in mainBranches,
                description: 'Should TSBI be updated (if newer version is available)?')
    }

    stages {
        stage('Announce Build Start') {
            steps {
                slackSend(color: '#11aac4', channel: "${slackChannel}", message: "STARTED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            }
        }

        stage('Set Gradle options') {
            steps {
                withCredentials([nexusCredentials]) {
                    script {
                        // inject required credentials (then we don't need the gradle settings file)
                        env.ORG_GRADLE_PROJECT_nexusTpsvcUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTpsvcPassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTpsvcUrl      = env.NEXUS_TPSVC_URL

                        env.ORG_GRADLE_PROJECT_nexusTalendSnapshotsUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTalendSnapshotsPassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTalendSnapshotsUrl      = env.NEXUS_TALEND_SNAPSHOTS_URL

                        env.ORG_GRADLE_PROJECT_nexusTalendReleasesUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTalendReleasesPassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTalendReleasesUrl      = env.NEXUS_TALEND_RELEASES_URL

                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceReleaseUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceReleasePassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTalendOSReleasesUrl             = env.NEXUS_TALEND_OS_RELEASE_URL
                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceReleaseUrl      = env.NEXUS_TALEND_OPEN_SOURCE_RELEASE_URL
                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceSnapshotUrl     = env.NEXUS_TALEND_OPEN_SOURCE_SNAPSHOT_URL
                    }
                }
            }
        }

        stage('SourceClear (SCA) scan') {
            when {
                expression { params.SCA_SCAN }
            }
            steps {
                withCredentials([string(credentialsId: "${VERACODE_TOKEN_CREDENTIALS_ID}", variable: 'SRCCLR_API_TOKEN')]) {
                    sh '''#!/bin/bash
                           curl -sSL https://download.sourceclear.com/ci.sh | \
                           DEBUG=${SRCCLR_CI_DEBUG_0PT} \
                           SRCCLR_SCM_REF_TYPE=branch \
                           SRCCLR_SCM_REF=${BRANCH_NAME} \
                           SRCCLR_CI_JSON=${SRCCLR_CI_JSON_OPT} \
                           sh -s -- scan --loud;
                       '''
                }
            }
        }

        stage('Static (SAST) scan') {
            when {
                expression { params.STATIC_SCAN }
            }
            steps {
                sh "./gradlew -Dorg.gradle.daemon=false clean build -x check"
                withCredentials([veracodeCredentials]) {
                    veracode applicationName: "$VERACODE_SANDBOX",
                            teams: "TPSVC",
                            canFailJob: true,
                            createProfile: true,
                            criticality: "High",
                            debug: true,
                            copyRemoteFiles: true,
                            fileNamePattern: '',
                            useProxy: false,
                            replacementPattern: '',
                            scanExcludesPattern: '',
                            scanIncludesPattern: '',
                            scanName: "${env.BRANCH_NAME}-${currentBuild.number}-${currentBuild.startTimeInMillis}",
                            uploadExcludesPattern: '',
                            uploadIncludesPattern: '**/build/libs/*.jar,**/build/libs/*.war',
                            vid: env.VERACODE_ID,
                            vkey: env.VERACODE_KEY
                }
            }
        }

        stage('Check and update TSBI') {
            when {
                expression { params.UPDATE_TSBI }
            }
            steps {
                withCredentials([githubCredentials, nexusCredentials, artifactoryCredentials]) {
                    script {
                        env.HUB_PROTOCOL = "https"
                        env.GIT_ASKPASS = pwd(tmp: true) + '/gitaskpass.sh'
                        env.NETRC_PATH = pwd(tmp: true) + '/.netrc'
                    }

                    writeFile file: env.GIT_ASKPASS, text: '''#!/bin/sh
                        case "\$1" in
                        Username*) echo "$GITHUB_USER" ;;
                        Password*) echo "$GITHUB_PASSWORD" ;;
                        esac
                    '''

                    writeFile file: env.NETRC_PATH, text: """
                        machine artifacts-zl.talend.com login $NEXUS_TALEND_USER password $NEXUS_TALEND_PASSWORD
                        machine artifactory.datapwn.com login $ARTIFACTORY_TALEND_LOGIN password $ARTIFACTORY_TALEND_PASSWORD
                    """

                    sh """
                        git config --global --add safe.directory \$(pwd)
                        git status
                        git checkout "tsbi-update-version-$BRANCH_NAME" || git checkout -b "tsbi-update-version-$BRANCH_NAME"

                        set +e
                        ./update_tsbi.sh "$NETRC_PATH"
                        update_result=\$?
                        rm -f "$NETRC_PATH"
                        echo "The update script has finished with status \$update_result"
                        set -e

                        if [ \$update_result -eq 0 ]; then
                            chmod 755 $GIT_ASKPASS

                            git status
                            git add .

                            default_branch=`git remote show origin | grep "HEAD branch" | sed 's@.*: @@'`
                            if [ "$BRANCH_NAME" = "\$default_branch" ]; then
                                commit_message="chore(tsbi): update tsbi and spring-boot versions"
                            else
                                commit_message="chore(tsbi): [$BRANCH_NAME] update tsbi and spring-boot versions"
                            fi

                            git commit -m "\$commit_message"
                            git push --set-upstream origin "tsbi-update-version-$BRANCH_NAME"

                            hub pull-request -f -b $BRANCH_NAME -m "\$commit_message" --no-edit -l tsbi-update || echo "Pull request already exists"

                        elif [ \$update_result -ge 2 ]; then
                            echo "TSBI update failed"
                            exit 1
                        fi
                    """
                }
            }
        }

    }

    post {
        success {
            slackSend(color: 'good', channel: "${slackChannel}", message: "SUCCESSFUL: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\nDuration: ${currentBuild.durationString}")
        }

        unstable {
            slackSend(color: 'warning', channel: "${slackChannel}", message: "UNSTABLE: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }

        failure {
            slackSend(color: '#e81f3f', channel: "${slackChannel}", message: "FAILED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }

        aborted {
            slackSend(color: 'warning', channel: "${slackChannel}", message: "ABORTED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }

    }
}
