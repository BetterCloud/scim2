#!/usr/bin/env groovy

// DO NOT CHANGE THIS FILE (alone)
// We should maintain this file in all our repos, so when changing this file,
// please copy-paste it to all other repos too (it also means all changes should be universal).
// Otherwise the changes may be overridden some time later.

def slackChannel = 'tpsvc-notifications'
def decodedJobName = env.JOB_NAME.replaceAll("%2F", "/")

def mainBranches = ['develop']

def nexusCredentials = usernamePassword(
        credentialsId: 'nexus-artifact-zl-credentials',
        passwordVariable: 'NEXUS_TALEND_PASSWORD',
        usernameVariable: 'NEXUS_TALEND_USER')

def veracodeApiCredentials = usernamePassword(
        credentialsId: 'veracode-api-credentials',
        passwordVariable: 'VERACODE_KEY',
        usernameVariable: 'VERACODE_ID')

def veracodeToken = string(
        credentialsId: "veracode-token",
        variable: 'SRCCLR_API_TOKEN')

def githubCredentials = usernamePassword(
        credentialsId: 'github-credentials',
        passwordVariable: 'GITHUB_PASSWORD',
        usernameVariable: 'GITHUB_USER')

def artifactoryCredentials = usernamePassword(
        credentialsId: 'artifactory-datapwn-credentials',
        passwordVariable: 'ARTIFACTORY_TALEND_PASSWORD',
        usernameVariable: 'ARTIFACTORY_TALEND_LOGIN')

String getGitRepositoryName() {
    String repoName = scm.getUserRemoteConfigs()[0].getUrl().tokenize('/').last().toString()
    repoName = repoName.endsWith('.git') ? repoName.substring(0, repoName.length() - 4) : repoName
    echo "Determined git repository name to be '$repoName'"
    return repoName
}

pipeline {

    agent {
        kubernetes {
            yamlFile 'builderPodTemplate.yaml'
            defaultContainer 'talend-tsbi-springboot-builder'
        }
    }

    environment {
        NEXUS_TPSVC_URL                       = 'https://artifacts-zl.talend.com/nexus/content/repositories/tpsvc'
        NEXUS_TALEND_SNAPSHOTS_URL            = 'https://artifacts-zl.talend.com/nexus/content/repositories/snapshots'
        NEXUS_TALEND_RELEASES_URL             = 'https://artifacts-zl.talend.com/nexus/content/repositories/releases'
        NEXUS_TALEND_OS_RELEASE_URL           = 'https://artifacts-zl.talend.com/nexus/content/repositories/TalendOpenSourceRelease'
        NEXUS_TALEND_OPEN_SOURCE_RELEASE_URL  = 'https://artifacts-zl.talend.com/nexus/content/repositories/TalendOpenSourceRelease'
        NEXUS_TALEND_OPEN_SOURCE_SNAPSHOT_URL = 'https://artifacts-zl.talend.com/nexus/content/repositories/TalendOpenSourceSnapshot'
        SRCCLR_DEBUG_0PT   = '0'
        SRCCLR_CI_JSON_OPT = '0'
        VERACODE_TOKEN_CREDENTIALS_ID = 'veracode-token'
        VERACODE_APP_NAME = 'Services Platform'
        VERACODE_SANDBOX = getGitRepositoryName()
    }

    options {
        buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME in mainBranches ? '5' : '2'))
        timeout(time: 30, unit: 'MINUTES')
        skipStagesAfterUnstable()
        disableConcurrentBuilds()
    }

    parameters {
        booleanParam(name: 'STATIC_SCAN',
                defaultValue: env.BRANCH_NAME in mainBranches,
                description: 'Should static scan (SAST) be performed?')
        booleanParam(name: 'SCA_SCAN',
                defaultValue: env.BRANCH_NAME in mainBranches,
                description: 'Should SourceClear scan (SCA) be performed?')
        choice(name: 'SRCCLR_CI_DEBUG_0PT',
                choices: ['0', '1'],
                description: 'Sets the DEBUG option on the srcclr cli command')
        choice(name: 'SRCCLR_CI_JSON_OPT',
                choices: ['0', '1'],
                description: 'Sets the SRCCLR_CI_JSON option on the srcclr cli command')
    }

    triggers {
        cron(env.BRANCH_NAME in mainBranches ? '@weekly' : '')
    }

    stages {
        stage('Announce Build Start') {
            steps {
                slackSend(color: '#11aac4', channel: "${slackChannel}", message: "STARTED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            }
        }

        stage('Set Gradle options') {
            steps {
                withCredentials([nexusCredentials]) {
                    script {
                        // inject required credentials (then we don't need the gradle settings file)
                        env.ORG_GRADLE_PROJECT_nexusTpsvcUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTpsvcPassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTpsvcUrl      = env.NEXUS_TPSVC_URL

                        env.ORG_GRADLE_PROJECT_nexusTalendSnapshotsUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTalendSnapshotsPassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTalendSnapshotsUrl      = env.NEXUS_TALEND_SNAPSHOTS_URL

                        env.ORG_GRADLE_PROJECT_nexusTalendReleasesUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTalendReleasesPassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTalendReleasesUrl      = env.NEXUS_TALEND_RELEASES_URL

                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceReleaseUsername = "${NEXUS_TALEND_USER}"
                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceReleasePassword = "${NEXUS_TALEND_PASSWORD}"
                        env.ORG_GRADLE_PROJECT_nexusTalendOSReleasesUrl             = env.NEXUS_TALEND_OS_RELEASE_URL
                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceReleaseUrl      = env.NEXUS_TALEND_OPEN_SOURCE_RELEASE_URL
                        env.ORG_GRADLE_PROJECT_nexusTalendOpenSourceSnapshotUrl     = env.NEXUS_TALEND_OPEN_SOURCE_SNAPSHOT_URL
                    }
                }
            }
        }

        stage('SourceClear (SCA) scan') {
            when {
                expression { params.SCA_SCAN }
            }
            steps {
                withCredentials([veracodeToken]) {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh '''#!/bin/bash
                                curl -sSL https://download.sourceclear.com/ci.sh | \
                                DEBUG=${SRCCLR_CI_DEBUG_0PT} \
                                SRCCLR_SCM_REF_TYPE=branch \
                                SRCCLR_SCM_REF=${BRANCH_NAME} \
                                SRCCLR_CI_JSON=${SRCCLR_CI_JSON_OPT} \
                                sh -s -- scan --loud;
                        '''
                    }
                }
            }
        }

        stage('Static (SAST) scan') {
            when {
                expression { params.STATIC_SCAN }
            }
            steps {
                sh "./gradlew -Dorg.gradle.daemon=false clean build -x check -D STATIC_SCAN=true"
                withCredentials([veracodeApiCredentials]) {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        veracode applicationName: "$VERACODE_SANDBOX",
                                scanName: "${env.BRANCH_NAME}-${currentBuild.number}-${currentBuild.startTimeInMillis}",
                                teams: "TPSVC",
                                canFailJob: false, // canFailJob and waitForScan should have the same value (see TPSVC-20517)
                                waitForScan: false, // canFailJob and waitForScan should have the same value (see TPSVC-20517)
                                timeout: 60,
                                deleteIncompleteScanLevel: '1',
                                createProfile: true,
                                criticality: "High",
                                debug: true,
                                copyRemoteFiles: false,
                                useProxy: false,
                                fileNamePattern: '',
                                replacementPattern: '',
                                scanExcludesPattern: '',
                                scanIncludesPattern: '',
                                uploadExcludesPattern: '',
                                uploadIncludesPattern: '**/build/libs/*.jar,**/build/libs/*.war',
                                vid: env.VERACODE_ID,
                                vkey: env.VERACODE_KEY
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend(color: 'good', channel: "${slackChannel}", message: "SUCCESSFUL: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\nDuration: ${currentBuild.durationString}")
        }

        unstable {
            slackSend(color: 'warning', channel: "${slackChannel}", message: "UNSTABLE: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }

        failure {
            slackSend(color: '#e81f3f', channel: "${slackChannel}", message: "FAILED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }

        aborted {
            slackSend(color: 'warning', channel: "${slackChannel}", message: "ABORTED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }

    }
}
