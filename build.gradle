buildscript {
    repositories {
        gradlePluginPortal()
    }

    configurations.all {
        resolutionStrategy {
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:$spotbugsPluginVersion"

        // workaround for reckon issue with Java 8
        classpath "org.ajoberstar.grgit:grgit-gradle:$grgitVersion"
    }
}

plugins {
    id "org.sonarqube" version "$sonarqubePluginVersion"
    id "org.ajoberstar.reckon" version "$reckonVersion"
}

reckon {
    scopeFromProp()
    snapshotFromProp()
}

if (!hasProperty('buildTimestamp')) {
    ext.buildTimestamp = new Date().format('yyyyMMddHHmmss', TimeZone.getTimeZone('UTC'))
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
    }
}

subprojects {
    group = "org.talend"

    apply from: rootProject.file('config/java.gradle')
    apply from: rootProject.file('config/publish.gradle')

    apply from: rootProject.file('dependencies.gradle')

    repositories {
        mavenCentral()

        maven {
            url 'https://artifacts-zl.talend.com/nexus/content/repositories/tpsvc'
            credentials {
                username nexusTpsvcUsername
                password nexusTpsvcPassword
            }
        }

        maven {
            url 'https://artifacts-zl.talend.com/nexus/content/repositories/releases/'
            credentials {
                username nexusTalendReleasesUsername
                password nexusTalendReleasesPassword
            }
        }

        maven {
            url 'https://artifacts-zl.talend.com/nexus/content/repositories/snapshots/'
            credentials {
                username nexusTalendSnapshotsUsername
                password nexusTalendSnapshotsPassword
            }
        }

        maven {
            url 'https://artifacts-zl.talend.com/nexus/content/groups/public'
        }
    }
}

// This task is used by Jenkinsfile
tasks.register('versionInformation') {
    doLast {
        if (project.hasProperty("version")) {
            new File("$projectDir/version.txt").text = "$version"
        } else {
            throw new GradleException('No version properties')
        }
    }
}
